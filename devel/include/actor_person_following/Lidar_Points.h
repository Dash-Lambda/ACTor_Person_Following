// Generated by gencpp from file actor_person_following/Lidar_Points.msg
// DO NOT EDIT!


#ifndef ACTOR_PERSON_FOLLOWING_MESSAGE_LIDAR_POINTS_H
#define ACTOR_PERSON_FOLLOWING_MESSAGE_LIDAR_POINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actor_person_following/Lidar_Point.h>

namespace actor_person_following
{
template <class ContainerAllocator>
struct Lidar_Points_
{
  typedef Lidar_Points_<ContainerAllocator> Type;

  Lidar_Points_()
    : header()
    , points()
    , max_distance(0.0)
    , xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)
    , zmin(0.0)
    , zmax(0.0)  {
    }
  Lidar_Points_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , points(_alloc)
    , max_distance(0.0)
    , xmin(0.0)
    , xmax(0.0)
    , ymin(0.0)
    , ymax(0.0)
    , zmin(0.0)
    , zmax(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::actor_person_following::Lidar_Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::actor_person_following::Lidar_Point_<ContainerAllocator> >::other >  _points_type;
  _points_type points;

   typedef double _max_distance_type;
  _max_distance_type max_distance;

   typedef double _xmin_type;
  _xmin_type xmin;

   typedef double _xmax_type;
  _xmax_type xmax;

   typedef double _ymin_type;
  _ymin_type ymin;

   typedef double _ymax_type;
  _ymax_type ymax;

   typedef double _zmin_type;
  _zmin_type zmin;

   typedef double _zmax_type;
  _zmax_type zmax;





  typedef boost::shared_ptr< ::actor_person_following::Lidar_Points_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actor_person_following::Lidar_Points_<ContainerAllocator> const> ConstPtr;

}; // struct Lidar_Points_

typedef ::actor_person_following::Lidar_Points_<std::allocator<void> > Lidar_Points;

typedef boost::shared_ptr< ::actor_person_following::Lidar_Points > Lidar_PointsPtr;
typedef boost::shared_ptr< ::actor_person_following::Lidar_Points const> Lidar_PointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actor_person_following::Lidar_Points_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actor_person_following::Lidar_Points_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::actor_person_following::Lidar_Points_<ContainerAllocator1> & lhs, const ::actor_person_following::Lidar_Points_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.points == rhs.points &&
    lhs.max_distance == rhs.max_distance &&
    lhs.xmin == rhs.xmin &&
    lhs.xmax == rhs.xmax &&
    lhs.ymin == rhs.ymin &&
    lhs.ymax == rhs.ymax &&
    lhs.zmin == rhs.zmin &&
    lhs.zmax == rhs.zmax;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::actor_person_following::Lidar_Points_<ContainerAllocator1> & lhs, const ::actor_person_following::Lidar_Points_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace actor_person_following

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::actor_person_following::Lidar_Points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actor_person_following::Lidar_Points_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actor_person_following::Lidar_Points_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actor_person_following::Lidar_Points_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actor_person_following::Lidar_Points_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actor_person_following::Lidar_Points_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actor_person_following::Lidar_Points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "07597cb25cd3fee3a74bcea7ddf36338";
  }

  static const char* value(const ::actor_person_following::Lidar_Points_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x07597cb25cd3fee3ULL;
  static const uint64_t static_value2 = 0xa74bcea7ddf36338ULL;
};

template<class ContainerAllocator>
struct DataType< ::actor_person_following::Lidar_Points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actor_person_following/Lidar_Points";
  }

  static const char* value(const ::actor_person_following::Lidar_Points_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actor_person_following::Lidar_Points_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"Lidar_Point[] points\n"
"\n"
"float64 max_distance\n"
"float64 xmin\n"
"float64 xmax\n"
"float64 ymin\n"
"float64 ymax\n"
"float64 zmin\n"
"float64 zmax\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actor_person_following/Lidar_Point\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"float64 distance\n"
"float64 pitch\n"
"float64 yaw\n"
"\n"
"float64 frame_x\n"
"float64 frame_y\n"
;
  }

  static const char* value(const ::actor_person_following::Lidar_Points_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actor_person_following::Lidar_Points_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.points);
      stream.next(m.max_distance);
      stream.next(m.xmin);
      stream.next(m.xmax);
      stream.next(m.ymin);
      stream.next(m.ymax);
      stream.next(m.zmin);
      stream.next(m.zmax);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lidar_Points_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actor_person_following::Lidar_Points_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actor_person_following::Lidar_Points_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "points[]" << std::endl;
    for (size_t i = 0; i < v.points.size(); ++i)
    {
      s << indent << "  points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::actor_person_following::Lidar_Point_<ContainerAllocator> >::stream(s, indent + "    ", v.points[i]);
    }
    s << indent << "max_distance: ";
    Printer<double>::stream(s, indent + "  ", v.max_distance);
    s << indent << "xmin: ";
    Printer<double>::stream(s, indent + "  ", v.xmin);
    s << indent << "xmax: ";
    Printer<double>::stream(s, indent + "  ", v.xmax);
    s << indent << "ymin: ";
    Printer<double>::stream(s, indent + "  ", v.ymin);
    s << indent << "ymax: ";
    Printer<double>::stream(s, indent + "  ", v.ymax);
    s << indent << "zmin: ";
    Printer<double>::stream(s, indent + "  ", v.zmin);
    s << indent << "zmax: ";
    Printer<double>::stream(s, indent + "  ", v.zmax);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTOR_PERSON_FOLLOWING_MESSAGE_LIDAR_POINTS_H
