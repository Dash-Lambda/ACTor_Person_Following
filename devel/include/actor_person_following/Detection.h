// Generated by gencpp from file actor_person_following/Detection.msg
// DO NOT EDIT!


#ifndef ACTOR_PERSON_FOLLOWING_MESSAGE_DETECTION_H
#define ACTOR_PERSON_FOLLOWING_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actor_person_following
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : width(0.0)
    , height(0.0)
    , center(0.0)
    , r(0.0)
    , g(0.0)
    , b(0.0)  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : width(0.0)
    , height(0.0)
    , center(0.0)
    , r(0.0)
    , g(0.0)
    , b(0.0)  {
  (void)_alloc;
    }



   typedef double _width_type;
  _width_type width;

   typedef double _height_type;
  _height_type height;

   typedef double _center_type;
  _center_type center;

   typedef float _r_type;
  _r_type r;

   typedef float _g_type;
  _g_type g;

   typedef float _b_type;
  _b_type b;





  typedef boost::shared_ptr< ::actor_person_following::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actor_person_following::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::actor_person_following::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::actor_person_following::Detection > DetectionPtr;
typedef boost::shared_ptr< ::actor_person_following::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actor_person_following::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actor_person_following::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace actor_person_following

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actor_person_following': ['/home/mpleune/catkin_ws/src/actor_person_following/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::actor_person_following::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actor_person_following::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actor_person_following::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actor_person_following::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actor_person_following::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actor_person_following::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actor_person_following::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f7a1a34da77d93e8a72f096cb0e7875c";
  }

  static const char* value(const ::actor_person_following::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf7a1a34da77d93e8ULL;
  static const uint64_t static_value2 = 0xa72f096cb0e7875cULL;
};

template<class ContainerAllocator>
struct DataType< ::actor_person_following::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actor_person_following/Detection";
  }

  static const char* value(const ::actor_person_following::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actor_person_following::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 width\n\
float64 height\n\
float64 center\n\
\n\
float32 r\n\
float32 g\n\
float32 b\n\
\n\
";
  }

  static const char* value(const ::actor_person_following::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actor_person_following::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.center);
      stream.next(m.r);
      stream.next(m.g);
      stream.next(m.b);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actor_person_following::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actor_person_following::Detection_<ContainerAllocator>& v)
  {
    s << indent << "width: ";
    Printer<double>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "center: ";
    Printer<double>::stream(s, indent + "  ", v.center);
    s << indent << "r: ";
    Printer<float>::stream(s, indent + "  ", v.r);
    s << indent << "g: ";
    Printer<float>::stream(s, indent + "  ", v.g);
    s << indent << "b: ";
    Printer<float>::stream(s, indent + "  ", v.b);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTOR_PERSON_FOLLOWING_MESSAGE_DETECTION_H
