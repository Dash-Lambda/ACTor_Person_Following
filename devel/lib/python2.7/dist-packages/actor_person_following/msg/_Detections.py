# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from actor_person_following/Detections.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actor_person_following.msg
import darknet_ros_msgs.msg
import perception_msgs.msg
import std_msgs.msg

class Detections(genpy.Message):
  _md5sum = "60fd021630dd3b6e37263ed4dd63f0e0"
  _type = "actor_person_following/Detections"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header
Header image_header
int32 num_detects
Detection[] detections

int32 closest
int32 close_target
int32 aruco_target
int32 color_target

int32 xres
int32 yres

bool aruco_visible
float64 aruco_x
float64 aruco_y
perception_msgs/PointInImage[] aruco_points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actor_person_following/Detection
float64 width
float64 height
float64 center

float64 close_overlap
float64 aruco_overlap

float64 close_dist
float64 aruco_dist

float64 aruco_strength

float32 r
float32 g
float32 b

darknet_ros_msgs/BoundingBox box

================================================================================
MSG: darknet_ros_msgs/BoundingBox
float64 probability
int64 xmin
int64 ymin
int64 xmax
int64 ymax
int16 id
string Class

================================================================================
MSG: perception_msgs/PointInImage
# x coordinate of the point in the image
float32 x
# y coordinate of the poitn in the image
float32 y
"""
  __slots__ = ['header','image_header','num_detects','detections','closest','close_target','aruco_target','color_target','xres','yres','aruco_visible','aruco_x','aruco_y','aruco_points']
  _slot_types = ['std_msgs/Header','std_msgs/Header','int32','actor_person_following/Detection[]','int32','int32','int32','int32','int32','int32','bool','float64','float64','perception_msgs/PointInImage[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,image_header,num_detects,detections,closest,close_target,aruco_target,color_target,xres,yres,aruco_visible,aruco_x,aruco_y,aruco_points

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Detections, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.num_detects is None:
        self.num_detects = 0
      if self.detections is None:
        self.detections = []
      if self.closest is None:
        self.closest = 0
      if self.close_target is None:
        self.close_target = 0
      if self.aruco_target is None:
        self.aruco_target = 0
      if self.color_target is None:
        self.color_target = 0
      if self.xres is None:
        self.xres = 0
      if self.yres is None:
        self.yres = 0
      if self.aruco_visible is None:
        self.aruco_visible = False
      if self.aruco_x is None:
        self.aruco_x = 0.
      if self.aruco_y is None:
        self.aruco_y = 0.
      if self.aruco_points is None:
        self.aruco_points = []
    else:
      self.header = std_msgs.msg.Header()
      self.image_header = std_msgs.msg.Header()
      self.num_detects = 0
      self.detections = []
      self.closest = 0
      self.close_target = 0
      self.aruco_target = 0
      self.color_target = 0
      self.xres = 0
      self.yres = 0
      self.aruco_visible = False
      self.aruco_x = 0.
      self.aruco_y = 0.
      self.aruco_points = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs))
      _x = self.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num_detects
      buff.write(_get_struct_i().pack(_x))
      length = len(self.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections:
        _x = val1
        buff.write(_get_struct_8d3f().pack(_x.width, _x.height, _x.center, _x.close_overlap, _x.aruco_overlap, _x.close_dist, _x.aruco_dist, _x.aruco_strength, _x.r, _x.g, _x.b))
        _v1 = val1.box
        _x = _v1
        buff.write(_get_struct_d4qh().pack(_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id))
        _x = _v1.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6iB2d().pack(_x.closest, _x.close_target, _x.aruco_target, _x.color_target, _x.xres, _x.yres, _x.aruco_visible, _x.aruco_x, _x.aruco_y))
      length = len(self.aruco_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.aruco_points:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.detections is None:
        self.detections = None
      if self.aruco_points is None:
        self.aruco_points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (self.num_detects,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections = []
      for i in range(0, length):
        val1 = actor_person_following.msg.Detection()
        _x = val1
        start = end
        end += 76
        (_x.width, _x.height, _x.center, _x.close_overlap, _x.aruco_overlap, _x.close_dist, _x.aruco_dist, _x.aruco_strength, _x.r, _x.g, _x.b,) = _get_struct_8d3f().unpack(str[start:end])
        _v2 = val1.box
        _x = _v2
        start = end
        end += 42
        (_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id,) = _get_struct_d4qh().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v2.Class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v2.Class = str[start:end]
        self.detections.append(val1)
      _x = self
      start = end
      end += 41
      (_x.closest, _x.close_target, _x.aruco_target, _x.color_target, _x.xres, _x.yres, _x.aruco_visible, _x.aruco_x, _x.aruco_y,) = _get_struct_6iB2d().unpack(str[start:end])
      self.aruco_visible = bool(self.aruco_visible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aruco_points = []
      for i in range(0, length):
        val1 = perception_msgs.msg.PointInImage()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.aruco_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs))
      _x = self.image_header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.num_detects
      buff.write(_get_struct_i().pack(_x))
      length = len(self.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections:
        _x = val1
        buff.write(_get_struct_8d3f().pack(_x.width, _x.height, _x.center, _x.close_overlap, _x.aruco_overlap, _x.close_dist, _x.aruco_dist, _x.aruco_strength, _x.r, _x.g, _x.b))
        _v3 = val1.box
        _x = _v3
        buff.write(_get_struct_d4qh().pack(_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id))
        _x = _v3.Class
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_6iB2d().pack(_x.closest, _x.close_target, _x.aruco_target, _x.color_target, _x.xres, _x.yres, _x.aruco_visible, _x.aruco_x, _x.aruco_y))
      length = len(self.aruco_points)
      buff.write(_struct_I.pack(length))
      for val1 in self.aruco_points:
        _x = val1
        buff.write(_get_struct_2f().pack(_x.x, _x.y))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.image_header is None:
        self.image_header = std_msgs.msg.Header()
      if self.detections is None:
        self.detections = None
      if self.aruco_points is None:
        self.aruco_points = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.image_header.seq, _x.image_header.stamp.secs, _x.image_header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image_header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.image_header.frame_id = str[start:end]
      start = end
      end += 4
      (self.num_detects,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections = []
      for i in range(0, length):
        val1 = actor_person_following.msg.Detection()
        _x = val1
        start = end
        end += 76
        (_x.width, _x.height, _x.center, _x.close_overlap, _x.aruco_overlap, _x.close_dist, _x.aruco_dist, _x.aruco_strength, _x.r, _x.g, _x.b,) = _get_struct_8d3f().unpack(str[start:end])
        _v4 = val1.box
        _x = _v4
        start = end
        end += 42
        (_x.probability, _x.xmin, _x.ymin, _x.xmax, _x.ymax, _x.id,) = _get_struct_d4qh().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v4.Class = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v4.Class = str[start:end]
        self.detections.append(val1)
      _x = self
      start = end
      end += 41
      (_x.closest, _x.close_target, _x.aruco_target, _x.color_target, _x.xres, _x.yres, _x.aruco_visible, _x.aruco_x, _x.aruco_y,) = _get_struct_6iB2d().unpack(str[start:end])
      self.aruco_visible = bool(self.aruco_visible)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.aruco_points = []
      for i in range(0, length):
        val1 = perception_msgs.msg.PointInImage()
        _x = val1
        start = end
        end += 8
        (_x.x, _x.y,) = _get_struct_2f().unpack(str[start:end])
        self.aruco_points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_6iB2d = None
def _get_struct_6iB2d():
    global _struct_6iB2d
    if _struct_6iB2d is None:
        _struct_6iB2d = struct.Struct("<6iB2d")
    return _struct_6iB2d
_struct_8d3f = None
def _get_struct_8d3f():
    global _struct_8d3f
    if _struct_8d3f is None:
        _struct_8d3f = struct.Struct("<8d3f")
    return _struct_8d3f
_struct_d4qh = None
def _get_struct_d4qh():
    global _struct_d4qh
    if _struct_d4qh is None:
        _struct_d4qh = struct.Struct("<d4qh")
    return _struct_d4qh
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
